
/*
 * No semicolons. Use linebreaks as delimiters.
	- Grammar should allow for certain one-lines (if cases etc).
	- Line breaks should be allow in the middle of an expression, for Formatting.
		Possibly force different indentation for line continuation.

 * Indentation is a part of the language. Done with tabs.
	- To avoid tab vs space problems, only allow tabs at beginning of line.
		Formatting indentation is done with spaces, tabs always mean scope indentation.
	- To avoid unintentional execution flow for mis-indented lines, 
		also use explicit block openers and closers.
	- Error reporting will be able more easily pin-point errors.

 * Everything is potentially a function. Parentheses are only used for arguments.
	- Allows seamless syntax transition from raw struct members to accessors.
		Like properties in C#. However C# does not have parentheses optional,
			they always denote a function call.
	- Need to differentiate between function reference and calling a function.
		Can be done by type inference (see c++ cast operators).
	- Default arguments and overloading can cause ambiguities, need ways to disambiguate. 
*/

// ==================== SCRAPPED IDEAS ===================

/*
	* Compile-time parameters for all symbol definitions (creating multiple symbol instances)
		E.g. "var myvar(i : int) = i"
		- Overlaps with type parameters
		- Most of the same effect can be achieved by functions with compile-time parameters
*/

// ====================== VARIABLES ======================

// V.0 - Defining a variable
//////////////////////////////////////////////////////////

// A simple variable declaration statement. Here, myvar will default to 0.
//	Its type is declared to be an "int".
var myvar : int

// Assigning a variable
myvar = 5

// Declaring and assigning a variable
var myvar_v2 : int = 5

// Variables can often infer their type
var myvar_v3 = 5

// Variables can be declared as "definitions".
//	They are computed at compile time and cannot be re-assigned.
def mydef = 5

// Variables can be declared as "constants"
//	They are computed at declaration and cannot be re-assigned.
const myconst = 5

// Variables can infer their mutability qualifier with
//	short-hand syntax for assignment.
myvar_v4 : int = 5
myvar_v5 := 5

// ======================= ARRAYS ========================

// A.0 - Defining a static array
//////////////////////////////////////////////////////////

// Here myarr is inferred to be a 4-length static array of ints
var myarr = [5, 6, 7, 8] // Hm, why not tuple syntax instead? var myvar = (5, 6, 7, 8)

// We can specify the type of the array
var myarr_v2 : int[4] = [5, 6, 7, 8] // Hm, problematic? Array/slice operator on types, are all valid?

// The array parameters are optional, here any int array can be assigned
var myarr_v3 : int[] = [5, 6, 7, 8] 

// The type is also optional, any array can be assigned here
var myarr_v4 : [] = [5, 6, 7, 8]

// To explicitly specify a static array, specify the length
var myarr_v5 : [4] = [5, 6, 7, 8]

// The length of static arrays can be inferred by using underscore
var myarr_v6 : [_] = [5, 6, 7, 8]

// A.1 - Defining a dynamic array
//////////////////////////////////////////////////////////

// Dynamic arrays can also be initialized
var mydynarr = [5, 6, 7, 8, ..] // Meh, is this necessary?

// Specify [..] to make the array dynamic
var mydynarr_v2 : int[..] = [5, 6, 7, 8]

// Just like with static arrays, the type is optional
var mydynarr_v3 : [..] = [5, 6, 7, 8]

// Here, the array is inferred to be dynamic
var mydynarr_v4 : [] = [5, 6, 7, 8, ..]

// And here
var mydynarr_v5 : int[] = [5, 6, 7, 8, ..]

// A.2 - Array slicing
//////////////////////////////////////////////////////////

// A slice can contain a single element. If so, it can be assigned to the element type.
//	Here, the result is 5
var a2_1 : int = myarr[0]

// A slice can exist as a reference to the original array, denoted by [&]
var a2_2 : [&] = myarr[0]

// The type can also be specified
var a2_2_v2 : int[&] = myarr[0]

// TODO: Slicing is very similar to "views", i.e a way of reading data in a non-linear
//	way. If slices are generalised to views, probably a multi-segment slice should
//	result in a single view, rather than an array of views.

// A slice can be noncontiguous, here the type the result is (int[&][2]), because of the
//	two 1-length segments
var a2_3 : [&][] = myarr[0, 3]

// Resolving to a new contiguous array of length 2: [5, 8]
var a2_4 : [] = myarr[0, 3]

// HMM: Using length forces slices to be "nice" and allow for longer lengths
//	than there is data. Using begin/end position instead allows for asserting on out-of-array
//	accesses.
// Use ":" to specify ranges of a certain length. Here, the result is [5, 6, 7]
var a2_5 = myarr[1:myarr.len - 1]

// Using two ":"-separators allows to specify a step. Here, the result us [5, 7] 
var a2_6 = myarr[0:2:2]

// ====================== FUNCTIONS ======================

// F.0 - Defining a function
//////////////////////////////////////////////////////////

// Here the type of mynot is inferred to (func[](a : bool) -> bool).
//	Note the empty closure and presence of "a" in the type signature.
def mynot = func(a : bool) -> bool do
	return not a
end

// Syntactic sugar for a named function definiton statement.
func mynot_v2(a : bool) -> bool do
	return not a
end

// Syntactic sugar for single expression functions.
def mynot_v3 = func(a : bool) -> bool => not a

// Combined with syntactic sugar for function definiton statements
func mynot_v4(a : bool) -> bool => not a

// Most terse function definition syntax as an expression, suitable for lambas, 
//	 using partial qualification of function type.
//	Here, the type of "a" is inferred to any type that supports inversion.
def mynot_v5 = func(a) => not a

// Most terse function definition as a statement
func mynot_v6(a) => not a

// F.1 - Calling a function without arguments
//////////////////////////////////////////////////////////

func true -> bool => #primitives.true

// We can call the function without any parantheses if it has no arguments.
// 	Disambiguation: Here the type of f1_1 is a typeset of (func[]() -> bool, bool).
//	If no other type restrictions apply, defaulting rules allow 
//	f1_1 to choose (bool) as a type and the function is evaluated immediately.
var f1_1 = true

// Here f1_2 is of type (bool) and therefore the function can be evaluated immediately.
var f1_2 : bool = true

// Here, the implied type of f1_3 is (func[...](...) -> (...)), i.e any function with any closure.
//	This allows (bool) to be exluded from the typeset (see f1_1) and f1_3
//	is inferred as a function reference with the concrete type (func[]() -> bool)
var f1_3 : func = true

// Here the function is force-evaluated and the type of f1_4 is (bool)
//	Will yield a compiler error if true is not a callable.
var f1_4 : true()

// F.2 - Calling a function with a single argument
//////////////////////////////////////////////////////////

func myprint(s : string) => #output.print(s)

// Here the argument type is inferred as to be the parameter type
//	allow any auto casting rules to convert it.
// 	Note that the parentheses are required here.
myprint("Hello")

// Since myprint must take a single argument, f2_1 becomes a function reference
//	with type (func[](s : string) -> ())
var f2_1 = myprint

// Which can then be called like the original function
f2_1("Hello")

// Functions can be partially evaluated, even for single-paramters functions.
//	Here, the type of f2_2 becomes (func[s : string]() -> ()), taking the
//	argument as a part of its closure. It will expand to a function semantically
//	equivalent to func[s : string]() -> () => myprint(s)
var f2_2 = partial myprint("Hello")

// Which can be called like a normal non-parameter function reference.
//	Note that the closure is populated at the partial application.
f2_2()

// F.3 - Calling a function with multiple arguments
//////////////////////////////////////////////////////////

// Parameter types can be partially defined
func lerp(a, b, f : float) => return a + (b - a) * c

// Multiple arguments are comma-separated, parantheses are required.
var f3_1 = lerp(1, 2, 0.5)

// Arguments can be partially named and supplied out of order.
//	A non-named argument cannot appear to the right of a named one.
var f3_2 = lerp(1, 2, f : 0.5)
var f3_3 = lerp(f : 0.5, a : 1, b : 2)

// F.4 - Calling a function with multiple return values
//////////////////////////////////////////////////////////

// Return statement can take comma-separated list, or tuple expression
func oneandtwo do 
	return 1, 2
end

// When single-expression function syntax, return value must be a tuple
func oneandtwo_v2 => (1, 2)

// Tuple assignment, type of f4_1 is (real, real)
var f4_1 = oneandtwo

// Comma-separated assignment
//	Here a is 1 and b is 2
var f4_2a, f4_2b = oneandtwo

// Return arguments can be ignored with underscores
//	Here b is 2, first return value is discarded
var _, f4_3b = oneandtwo

// F.5 - Calling a function with tuples
//////////////////////////////////////////////////////////

// You can use tuples to call functions that does not explicitly
//	take tuples. Tuples will be unpacked and consumed left-to-right.
var f5_1 = lerp(f4_1, 0.5)

// F.6 - Calling a function that takes a function
//////////////////////////////////////////////////////////

func caller(c : func(a : u8) -> u8) -> u8 do
	// Disambiguation: Here c is evaluated because the return type is u8
	return c(42)
end

// Will be type-inferred to (func() -> u8) when used below
def callback = func(a) => a 

// Callback is inferred to a function reference
var f6_1 = caller(callback)

// Functions can be defined directly as an expression as well
var f6_2 = caller(func(a) => a + 1)

// F.7 - Calling a function that returns a function
//////////////////////////////////////////////////////////

// The nested function takes a bool, b, and returns a function
//	with b captured in a closure, taking another bool, c, as a parameter
func nested(b : bool) => func(c : bool) => c and b

// Type of f7_1 is (func[b : bool](c : bool) -> bool)
var f7_1 = nested(true)

// Calling f7_2 includes the closed "true" value
var f7_2 = f7_1(false)

// Directly calling the returned function
var f7_3 = nested(true)(false)

// F.8 - Calling functions with optional paramters
//////////////////////////////////////////////////////////

// Function paramters can have default arguments, making it optional for the caller.
//	Internally, the parameter will be assigned the default arument, if not supplied.
func stringToInteger(s : string, base : uint = 10) => #intrinsics.atoi(s, base)

// Calling the function both with and without the parameter is ok
var f8_1 = stringToInteger("42")
var f8_2 = stringToInteger("0101", 2)

// All parameters can be optional
func int(bitcount : uint = 32, signed : bool = true) => #primitives.aint(bitcount, signed)

// The caller can specify any or all of the optional parameters by name
var f8_3 = int(signed : true)

// F.9 - Partial application
//////////////////////////////////////////////////////////

// Arguments can be partially applied
var f9_1 = partial lerp(1, 2)

// And then called with the rest of the arguments, left to right
var f9_2 = f9_3(0.5)

// When applying arguments that are not the left-most, use named
//	arguments, or underscore
var f9_3 = partial lerp(_, _, 0.5)
var f9_4 = f9_3(1, 2)

// F.10 - Specializing functions
//////////////////////////////////////////////////////////

// Functions can be specialized for certain arguments, fully or partially.
//	The best matching specialization will be chosen.
specialize int(16, true) => #primitives.s16
specialize int(16, false) => #primitives.u16
specialize int(signed : true) => partial #primitives.aint(_, true)

// F.11 - Generic function parameters
//////////////////////////////////////////////////////////

// Use "$" to create labels for type indentifiers that can be shared among
//	epxression in that scope. Here, a and b is restricted to be the same type.
func myadd(a : $op_type, b : $op_type) => a + b

// ======================== TYPES ========================

// T.0 - Defining a type
//////////////////////////////////////////////////////////

// A type definiton lists all members. The type of mytype is (type).
def mytype = type begin
	a : int
	b : int
end

// Syntactic sugar for a named type definiton statement.
type mytype_v2 begin
	a : int
	b : int
end

// Syntactic sugar for simple wrapper types.
def mytype_v3 = type => mytype_v2

// Combined with syntactic sugar for function definiton statements
type mytype_v4 => mytype_v3


// T.X - Type parameters
//////////////////////////////////////////////////////////

def vector = type(t : type, s : size) begin // <- unecessary if symbol parameters exist?, better used for trait syntax?
	data : t[s]
end

type vector_v2(t : type, s : size) begin
	data : t[s]
end

specialize vector(f32, 4) => #primitives.f32x4

type vec4 => vector(f32, 4)


// ======================== VIEWS ========================

type objtype begin
	name : string
	x : int
	y : int
end

def myobjview = view(objtype, 2) begin
	x, x, x, y, y, y, name, name, name
end


var objarr = objtype[1000]

var r = objarr.x + objarr.y

// Generic SOA view
type __soa_view(obj_type : type, field : #types.field) begin
	a : #field_type(obj_type, field)[&] // <- TODO: Slice syntax
end

func __create_soa_view(obj_type : type, field : #types.field, a : obj_type[]) -> __soa_view(obj_type, field) begin
	const field_type = #field_type(obj_type, field)
	const blockoffset = #field_offset(obj_type, field) * a.size
	const blocksize = a.size * #field_size(obj_type, field)
	const memblock = #memory(a)[blockoffset:blocksize]
	return __objtype_soa_view { memblock as field_type[a.size] }
end

func __ref_soa_view(v : __soa_view, i : u64, l : u64) -> #field_type(objtype, v.id)[&] begin
	return v.a[i:l]
end

// =======================================================

// Control flow

if !value
	return false

if a
	b
else
	if c d
else
	e

if a then
	b
elseif a2
	if c then
		d
	end
else // <- problem, only indentation dictates flow
	e

if hej == 0 then
	print("hej")
else hej == 1
	asdas
else
	asdasd
end


// Complex nesting block indentation
//////////////////////////////////////////////////////////

/////////////////////////////
///// Non-bracer blocks /////
/////////////////////////////

// Explicit blocks, one line
// TODO: Should this be allowed?
//	Leaning towards no, makes block logic complex

// 	Maybe only if block is not broken by linebreak
if call(func do return true end) then print("case true") else print("case false") end

// Single-expressions, one line
if call(func => true) print("case true") else print("case false")

// Explicit blocks, multiple lines
if call(
	func do
		return true 
	end,
	func do
		return true 
	end)
	print("case true")

// Single-expressions, multiple lines
if call(func => true)
	print "case true"
else if call(func => true)
	print "case false"


// IF

// Statement version
if a then
	b
end

if a
then
	b
end

if a then
	b = b * 2
	return b
else if c then
	d = d * 2
	return d
end

switch x in
case a do
	a
case b do
	b
case c do
	c
end

// Expression version
if a => b 
	else c

// Function needs separator since func (a) is ambiguous
func(a, b) => 
	a + b

switch x => 
	case a => 5 
	case b => 6 
	case c => 

// Singular statement version. TODO: Necessary? Or the same as expression, with () return value
//	-> Messy if different branches have different types
if a
	return b
else if c
	return d
else
	return e

// Problem with single-statment version, ambiguous nested else:
// -> Is it ambiguous though? 'Else' can just be eaten by the closest if
if a => if b => c else d else e

// Else-if expression
if a => b else if c => d else e

// Nested else-if expression
if a => 
	if b => 
		c 
		else if d => 
			e 
		else
			f 
	else // <-- Wrong? Else if above is ambiguous
		g

// Ok, I think
if a => if b => c 
	else if d => e
	else f else g

// Ok, I think
if a => 
	if b => c 
	else
	if d => e
	else f

// Multiline versions
call1(a1, b1, call2(a2, b2, call3(a3, b3, c3), c2), c1)

// Ok, first expression continues on next indentation
call1(a1, b1, 
	call2(a2, b2, call3(a3, b3, c3), c2), c1)

// Also ok, first expression keep all arguments on the correct "spine"
call1(a1, b1, 
	call2(a2, b2, call3(a3, b3, c3), c2),
	c1)

// Not ok, call2 is broken
call1(a1, b1, 
	call2(a2, b2, 
	call3(a3, b3, c3), c2), c1)
	
// Maybe ok, call2 continuation is good, but c1 is potentially on the wrong level
// TODO: Is this a special case where it's always ok to pad on the "tail" of an expression?
//	Probably needs to be ok, otherwise trailing parentheses will be a mess
call1(a1, b1, 
	call2(a2, b2, 
		call3(a3, b3, c3), c2), c1)

// Definitely ok, call2 continuation is good, c1 continues call1
call1(a1, b1, 
	call2(a2, b2, 
		call3(a3, b3, c3), c2),
	c1)

// Hm, this should be ok, but the padding becomes easy to confuse with indentation
// NOTE: Parser needs to make sure padding is consistent for each "spine", and that padding
//	never decreases when indentation happens
call1(a1, 
	  b1, 
	  call2(a2, 
		    b2, 
		    call3(a3, 
			      b3, 
			      c3),
		    c2),
	  c1)


// Multiline block if statement, then is placed on new line
if a(b, c, 
	d, e,
	asdas,
	asd,
	asd)
then
	return b
end

// Multiline if expression
if a(b,
	c,
	d,
	e) => f

// Multiline short-hand is statement is parsed but not allowed
if a(b,
	c,
	d,
	e)
	return b

//////////////////////////////////////////////////////////

// Something something printf
func parse_fmt_params(fmt : string) -> fmt_param[] do 
	...
end
func to_types(params_data : fmt_param[]) -> type(display)[] do
	...
end
func printf(fmt : string, params : to_types($params_data)) 
	where $params_data = parse_fmt_params(fmt)
do
	var slice_pos = 0
	for (param, param_data) in (params, params_data) do
		#output.print(fmt[slice_pos..param_data.start]
		#output.print(param.display)
		slice_pos += param_data.length
	end
	#output.print(fmt[slice_pos..])
end


// This is weird, but seems to be according to rules if start of block is start of statement
// NO: This is not according to the rules, the block header for `do` is not `def`
def weird_case = 
	func(x) -> 
		bool
do
	blah()
end

// Versus
// This needs to be the correct line split version of a def-function
def weird_case = 
	func(x) -> 
		bool
	do
		blah()
	end

// To mitigate this, there is syntactic sugar for functions, like so
func weird_case(x) -> bool do
	blah()
end

func weird_case(x) ->
	bool
do
	blah()
end


def complex_case = func(val : int,
	callback : func(x : int) -> bool = 
		func(x : int) -> bool
	do
		return x > 2
	end, 
	callback2 : func(x : int) -> bool = func(x : int) -> bool do
		return x > 2
	end)
do
	callback(val)
	callback2(val)
end

callable(a, 
	"asdasd
	 asdasd
	 asda",
	b)


// Functions that return functions :(

def myfunc = func(x) -> func(x) -> bool do
	// Is the latter func a type defintion or a function definition?
	// The "do" could belong to the latter func
end



// General
//////////////////////////////////////////////////////////

// Grammar Requirements:
// 1. The grammar should not rely on whitespace for disambiguation.
//  Reasons:
//      * Whitespace (especially indentation and linebreaks) is often lost in translation.
//      * Relying on whitespace makes an auto-formatter much more difficult.
// 2. Two expressions cannot follow each other without a non-whitespace separator.
//  Reasons:
//      * Ambiguous for unary operators, e.g "5 -6", without significant whitespace.
//      * Even if we considered whitespace, it makes the statement hard to read.
//      * It makes multi-line expressions for expression 1 either
//          - share the same "spine" as the following expression
//          - or "hide" the second expressions as a part of the multi-line
// 3. Regular blocks should not automatically yield the last statement as an expression for the whole block
//  Reasons:
//      * Forces block layouts on what could be light-weight inline expressions
//      * Looks weird mixing statements and yielding expressions
//      * Harder to distinguish a yielded expression from a statement without explicit statement-delimiters

// Layout Requirements:
// 1. Any two "layout sequencing tokens", i.e block headers, linkers, closers etc, in 
//  a statement should always align, either horizontally, or vertically.
// 2. Aligment is measured in indentation levels, a token on one indentation level
//  can never align with a token on another.
//  - For tab-lengths to be user-customizable, we can never rely on mixed
//      indentation for alignment.
// 3. Control flow should be identifiable on the left hand side of statements.
//  - This means statements on separate lines and multi-line expressions clearly
//      differentiated from indented code.
// 4. Blocks with multi-statement bodies must have their bodies indented.
//  - Statements do not have a delimiter (like ";"), so they need to be on different lines.


// If-else
//////////////////////////////////////////////////////////

// Goals
// * Support an expression version
// * Ideally statement and expression versions look similar
// * Ideally expression and statement versions share simliarities to function literals.

// Requirements Analysis
// * Grammar rules 1 + 2 force the separator to be different for single-statement/expression
//  versions.
// * Grammar rule 2 prevents "if a b" as a short hand expression.
// * Grammar rule 3 and Layout rule 4 prevent regular "then-end" block versions for if-expressions.

// Exploration...


// What about post-fix forms for expression ifs? This works with python-style
//  list comprehensions for "for" as well

// A little bit harder to read, but avoids special characters for expression versions
var hej = 5 if x else 6

// Maybe this can work too, this would return an "int?". The "else none" is perhaps implicit.
var hej = 5 if x

// It does _not_ work for statements.
return 5 if x // The return is not conditional here, the returned value is

// We can just kill single-statement ifs, they've been nothing but trouble

// Functions can use return directly for single expressions
// Not sure I like this, kindof neat, but why only return? Works less well for ifs
func hej(x) -> int
	return x + 1
	
// Hm, maybe for if too?
if x return 5


vec = [[1,2,3], [4,5,6], [7,8,9]]
var pyth = num for elem in vec for num in elem




// There is a difference here, hej1 produces a flat list
//  hej2 produces a list of lists
var hej1 = 
	for elem in vec 
		for num in elem => 
			num
var hej2 = for elem in vec => for num in elem => num


var hej2 = 
	for elem in vec for num in elem if num > 5 => 
			num



[[row[i] for row in matrix] for i in range(4)]

var hej3 = for i in range(4)
	for row in matrix 
	do row[i]


var hej3 = row[i] for i in range(4) for row in matrix

var hej = 5
	if x
	else 7
	if y
	else 3

var hej =
	if x produce 
		do
			print(5)
			produce 6
		end
	else if y produce 7
	else produce 3
	
var hej =
	if x yield
		do
			print(5)
			yield 6
		end
	else if y produce 7
	else produce 3	
	
var hej =
	if x do
		begin
			print(5)
			yield 6
		end
	else if y => 7
	else => 3

// Can we use something else than "=>"? it does not follow keyword rules...

def hej = 
	func(x) 
	where x is u64 
	do return x + 1

def hej = 
	func(x) begin
		print x
		return x + 1
	end
	
func hej(x)
where x is u64 
yield x + 1

func hej2(x) where x is trait is x + 2

if x > 0 then
	print 5
else
	print 7
end

hej = if x > 0 return 5 else 6

if x > 0 func return

// Open-ended return is a problem
if x > 0 then
	return none
end
call(x)

// Maybe expresssions should not have any of the indentation restrictinos that statements have
// It leads to weird multi-line statements that are not block openers.
// Not requiring expressions to be aligned allows easier use of "=>" instead of return/produce etc
//  "return" for yielding expressions is a no-go since "if x return y" looks like a c-style shorthand if.
// New proposed rules:
// * Block opener must align with block header
// * Block linker and footer must align with either block opener or block header
// * Block openers are allowed to share indentation level with block header
// * Multilines needs exactly 1 indentation. Multilines can further be broken down with new indentations.

// We can differentiate between same-syntax statement-if and expression if by always choosing
//  statement-if when possible
// DON'T LIKE: It makes it too similar to the statement version with only a missing "end"
//  it will be harder to catch errors here.
var hej = 
	if x > 0 then 
		5
	else then 
		6

if x > 0 then
	return 5
else if x < 0 then
	return 6
else then
	return 7
end

def hej = func(x) => x + 1
func hej(x) => x + 1

func hej(x) -> none
	where x is u64 
	=> x + 1
def hej = func(x) -> none
	where x is u64
	=> x + 1

func hej(x)
	where x is u64
do
	return x + 1
end

def hej = 
	func(x)
		where x is u64 
	do
		return x + 1
	end

var hej = 
	match x in
	case 5 then
		print "hej"
		return 5
	case 4 then
		print "hej"
		return 4
	else
		print "hej"
		return 5
	end
	
var hej = 
	match x =>
	case 5 =>
		5
	case 4 =>
		4
	else =>
		5

var hej = match x => case 5 => 5 case 4 => 4 else => 5


// What about just a cleaner Python? If we use postfix if/for expressions, we
//  can use some kind of do-statement-body syntax for calculating a value
// Then we need to solve labmda functions and statement bodies that return expressions

// If expressinons and statements
var hej = 1 if x > 0 else -1 if x < 0 else 0
var hej = 
	inexp do
		if x > 0 then
			return 1
		elseif x < 0
			return -1
		else
			return 0
		end
	end
	
// Supports C#-style if-casts as well?
var hej = y if x is y : u64 else none

// Maybe assignment?
var hej = y if x + 1 as y > 0 else y + 1

// For expressions and statements
var hej = i for i in range(4)
var hej = 
	inexp do
		uninitialized var res : int[4]
		for i in range(4) do
			res[i] = i
		end
	end

// Functions and lambdas
// Note that lambdas does not support generics
//  in fact, this declaration is not complete if hej is not used in the same scope
//  and the type of x can be deduced
var hej = func(x) => x + 1
var hej = 
	func(x) do
		return x + 1
	end

// This is more complete
var hej = func(x : int) => x + 1
var hej = 
	func(x : int) do
		return x + 1
	end

// Allowed, since hej is now a "generic" symbol
func hej(x) do
	return x + 1
end

var hej = [1, 2, 3, 4].map(func(x) => x + 1)

var hej = [1, 2, 3, 4].map(
	func(x) do 
		return x + 1 
	end)
	
// Pattern matching
// No expression version, have to use inexp
var hej = 
	inexp do
		match x with
		case 5 then return 6
		case 4 then return 7
		else return 8
		end
	end


// GAH! Post-fox If/for expression forms are not parseable without statement delimiters
// Below, the if-statement will be parsed as the expression assigned to "hej"
var hej = 42
if hej == 42 then
	return 0
end

// This cannot even be saved by linebreaks as delimiters, since the linebreak
//  could be a multiline break. Hence Python's requirements for '()' around multi-line expressions

// A possible solution would be to only parse multilines if the last token is an operator
//  ruby-style
// This feels very messy and easy for en error checker to misunderstand intent
var hej = 42
	if x else 43
// Would be misunderstood


// ANOTHER ATTEMPT WITHOUT POSTFIX OPERATORS

// If-statement
if x > 0 then
	return 1
else if x < 0 then
	return -1
else
	return 0
end

// If-expression
var foo = if x > 0 => 1 else if x < 0 => -1 else 0

// To disambiguate nested ifs, "then" is optional directly after "else"
// Compiler will warn if this style is used outside of this edge case
if x > 0 then
	return 1
else then
	if x < 0 then
		return -1
	else
		return 0
	end
end

// For-statement
for x in range(4) do
	...
end

// For-expression
// Here, foo becomes a list of size 4
var foo = for x in range(4) => x

// For-expressions can be nested
// Here, foo becomes a list of size 16
var foo = for x in range(4) for y in range(4) => x + y

// For-expressions can be filtered
// Here, foo becomes a dynamic-length list since the filter is not evaulated compile-time
var foo = for x in range(4) when x > 2 => x

// Normal expressions can be filtered too!
// Here, foo becomes an optional int
var foo = x when x > 2

// Match-statement
match x with
case > 0 then
	return 1
case < 0 then
	return -1
else
	return 0
end

// Match-expression
var foo = match x => case > 0 => 1 case < 0 => -1 else 0

// Function statement
func add(x, y) do
	return x + y
end

// Function expression (lamdba)
var add =
	func(x, y) do
		return x + y
	end
var foo = add(x, y)
	
// Function expression (lamdba), short-hand version
var add = func(x, y) => 42
var foo = add(x, y)













// NOTE: Python style postfix if-expressions work better with indentation rules since the expression
//  does not start with a keyword.
// DON'T LIKE: That "elseif" does not work with this style, since it flips the order.
//  Perhaps elseif can be ditched if we enforce "else then"...
// ALTERNATIVE: Structure if-expressions like statements, but with a keyword to indicate
//  a single expression. This is a bit awkward with indentation rules.
//  But is more readable than postfix style.
// Let's see if this work with "match" as well
	
// Pattern matching:

match x
case 5 then 
	return 7
case 4 then
	return 9
else
	return 4
end

hej = 
	match x 
	case 5 produce 7 
	case 4 produce 9 
	else 4
	
if x then 
	return 7
elseif y then
	return 5
else
	return 2
end

if x then 
	return 7
else if y then
	return 5
else then
	return 2
end

return 
	if call(y,
		x)
	=> 7 
	else if y => 5
	else => 2

// Basic multi-statement version
// * "then" is used to indicate multi-statement bodies, requires a single "end"
// * To avoid branches with simultanous single/multi statement bodies
//      we only put the "then" at the beginning, it applies for all bodies in the if-block
if a then
	a2
	a3
else
	b2
	b3
end

// If "then" is omitted, all bodies will only be a single statement
//  * Bodies with multiple statements are not allowed here
if a
	a2
else
	b2
	
// Single-statement version can be used as an expression
var foo =
	if a
		a2
	else
		b2

// Following block-layout rules, the single statement version can be a one-liner
//  * This will not work for "then" versions, since we need a new-line to separate statements
var foo = if a a2 else b2

// Expression-if must have else-branch, the code below will not compile
var foo = if a a2

// Putting the branch expression on the same line works
if a a2
else b2

// Definitely not allowed for the "then" version since more statements cannot share that line,
//  code below will not compile
if a then a2
else b2
end

// Breaking a line like this is not allowed, since "else" here is not aligned to any block header or sequencer
var foo = if a a2
	else b2
	
// The "else" branch will bind to the closest "if", the code below will cause an indentation error
if a
	if b
		b2
else
	c2

// To address this "dangling else" problem, we can introduce a "then" block for the inner if
if a
	if b then
		b2
	end
else
	c2
	
// This will not be a problem for expression-ifs, since "else" is always required
if a
	if b
		b2
	else
		c2
else
	d2

// "elseif" is its own keyword, otherwise we cannot distinguish "else if" as a sibling
//      branch, or an "else" with a body leading with an "if"
//  * There is also no way to disambiguate "else if", even if we always treat it as a sibling branch
//  * NOTE: If the grammar forces "then" on each branch then this is no longer a problem, since the nested
//      else-if is functionally the same as the sibling version for expression-ifs
if a
	a2
elseif b
	b2
else
	c
	
// Works the same for "then" version
if a then
	a2
elseif b
	b2
else
	c
end

// If-expression bodies can be complex ("last" here meaning yield last statement as expression)
if a
	last
		b
		b2
	end
else
	c

// This is not allowed according to layout rules since the "end" encroaches on the if-else block
if a last
	b
	b2
end
else
	c
	
// This is not allowed because "then" is not a block header in itself, unlike "last"
//  It can only be used for block-sequencing
if a
	then
		b2
	end
	
// Try to abuse it
if callf(a, b, c,
	d, e, f)
	action()
end

call(c)
	.bind(f)
	.bind(g)

if mycond(a,
		b,
		c,
		d)
	if mycond(a
			b,
			c,
			d)
		myaction(a,
				b,
				c
				d)
	elseif mycond(a,
			b,
			c,
			d)
		myaction(a,
				b,
				c
				d)
	else
		myaction(a,
				b,
				c
				d)
else
	myaction(a,
			b,
			c
			d)
		
if mycond(a,
	b,
	c,
	d)
	if mycond(a
		b,
		c,
		d) myaction(a,
			b,
			c
			d)
	elseif mycond(a,
		b,
		c,
		d)
		myaction(a,
			b,
			c
			d)
	else
		myaction(a,
			b,
			c
			d)
else
	myaction(a,
		b,
		c
		d)
	




// Proposed indentaiton rules:
// * Blocks opening new statement bodies must have their bodies indented _exactly_ 1 block-indent
// * Multi-line statements must indent the line continuation _at least_ 1 block-indent
// * Keywords belonging to the same statement or primary expression must align
//  either vertically or horizontally
















